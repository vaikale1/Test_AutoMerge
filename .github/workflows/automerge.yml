name: Auto Merge

on:
  workflow_run:
    workflows: ["Build and Test"]  # This listens to the completion of "Build and Test" workflow
    types:
      - completed  # Ensures the automerge workflow runs only after "Build and Test" is complete

jobs:
  automerge:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: write  # Ensure actions: write permission

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure PR is mergeable
        id: mergeable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_details=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable --jq .)
          echo "PR Details: $pr_details"
          mergeable=$(echo "$pr_details" | jq -r .mergeable)
          echo "Mergeable state: $mergeable"
          if [ "$mergeable" = "MERGEABLE" ]; then
            echo "Pull request is mergeable."
          else
            echo "Pull request is not mergeable."
            exit 1
          fi

      - name: Ensure Required Approvals
        id: approvals
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const approvedReviews = reviews.filter(r => r.state === "APPROVED");
            const requiredApprovals = 1;  // Adjust based on repository rules
            if (approvedReviews.length < requiredApprovals) {
              core.setFailed(`PR requires at least ${requiredApprovals} approval(s).`);
            }

      - name: Automerge Script
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            if (pr.mergeable_state === "dirty") {
              console.log("PR has conflicts, cannot merge.");
              return;
            }
            if (pr.mergeable_state === "clean") {
              console.log("PR is clean and ready for merging.");
            }
            if (pr.mergeable) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: "squash",
                commit_title: "Auto-merged by GitHub Actions"
              });
            }
