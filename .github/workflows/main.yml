name: Main Workflow

on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  status: {}

jobs:
  trigger_build:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Build Workflow via API
        run: |
          response=$(curl -s -w "%{http_code}" -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/dispatches \
            -d '{"ref":"refs/heads/${{ github.event.pull_request.head.ref }}"}')

          http_code=$(echo "$response" | tail -n 1)
          body=$(echo "$response" | head -n -1)

          echo "Response Status Code: $http_code"
          echo "Response Body: $body"

          if [[ "$http_code" != "201" && "$http_code" != "204" ]]; then
            echo "Failed to trigger build workflow. Status code: $http_code"
            exit 1
          else
            echo "Build workflow triggered successfully with status code $http_code."
          fi

      - name: Wait for Build Workflow to Complete
        run: |
          echo "Waiting for build workflow to complete..."
          build_status="in_progress"
          retries=0
          max_retries=30  # Max retries to avoid infinite loop (30 retries, 10 seconds each = 5 minutes)
          
          while [ "$build_status" != "completed" ] && [ $retries -lt $max_retries ]; do
            # Get the workflow runs related to the current commit
            workflow_runs=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs)
            
            # Get the build run ID based on the current commit SHA
            build_run_id=$(echo "$workflow_runs" | jq -r ".workflow_runs[] | select(.head_sha == \"${{ github.sha }}\") | .id")
            
            if [ -z "$build_run_id" ]; then
              echo "Build run ID not found for commit ${{ github.sha }}. Retrying..."
              retries=$((retries + 1))
              sleep 10
              continue  # Retry after waiting for the build to be registered
            fi
            
            echo "Build Run ID: $build_run_id"
            
            # Check the status of the build run
            build_status=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs/$build_run_id)
            
            # Extract the build status using jq
            build_status=$(echo "$build_status" | jq -r ".status")
            echo "Current build status: $build_status"
            
            if [ "$build_status" == "queued" ]; then
              echo "Build is queued, waiting for it to start..."
            fi
            
            # Sleep for 10 seconds before polling again
            sleep 10
            retries=$((retries + 1))
          done
          
          if [ $retries -ge $max_retries ]; then
            echo "Build workflow did not complete in time, aborting automerge process."
            exit 1
          fi
          
          # Once build completes, check the conclusion
          build_conclusion=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/$build_run_id \
            | jq -r ".conclusion")
          
          echo "Build workflow completed with status: $build_status and conclusion: $build_conclusion"
          
          # Ensure the build was successful before proceeding
          if [ "$build_conclusion" != "success" ]; then
            echo "Build workflow failed, aborting the automerge process."
            exit 1
          fi

          
  # 3. Trigger Automerge Workflow
  trigger_automerge:
    needs: trigger_build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Automerge Workflow using GitHub API
        run: |
          echo "Triggering the automerge workflow after the build completes successfully."
          # Trigger the automerge workflow using GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/automerge.yml/dispatches \
            -d '{
                  "ref": "refs/heads/${{ github.event.pull_request.head.ref }}", 
                  "inputs": {
                    "pr_number": "${{ github.event.pull_request.number }}"
                  }
                }'
